#+TITLE: rclip-client README

* What is this?

This is the command-line client and it's been tested under Linux and MacOs.

* What is required?

- *Operating System*: Linux, MacOS. Minimal testing for Windows so far and pending checks for BSD distributions.
- *Build Tools*: A rust compiler and the cargo build tool
- *Tools and Libraries under Linux*: curl, pango-dev, cairo-dev, libXcursor-dev (TBD update this list...)

* How to build this?

At the root of this project, open a command prompt and type =cargo build=.

* How to run this?

Please refer to the top level folder for desktop or command-line screenshots.

** Desktop user interface

*This merely exists for very occasional usage under MacOS, where I do not run a tiling window manager*.
The ideal workflow is interacting with the command-line version via keyboard shortcuts.

[[./images/screenshot_gui.png]]

** Command-line user interface

*** Display help

#+begin_src sh
./target/debug/rclip-client-cli --help
#+end_src

*** Read contents from the clipboard server

*Under Linux, an auxiliary program is required* to ensure that the clipboard contents are persisted after the command-line program exists (xclip, xsel, etc.).
- For Linux, the auxiliary program *must be wrapped* into a script that accepts the clipboard contents as *single argument*. The same might be required under other operating systems running xorg/x11 but this hasn't been tested yet
- On MacOS, even when the command-line app terminates, the clipboard isn't cleared

#+begin_src sh
  ./target/debug/rclip-client-cli --clipboard-program /home/vip/copytext.sh
#+end_src

Here are the contents of the above-mentioned =copytext.sh=.

#+begin_src sh
  echo -n $1 | xclip -sel clip
#+end_src

*** Write contents to the clipboard server

#+begin_src sh
  ./target/debug/rclip-client-cli --command WRITE --text new_clipboard_contents
#+end_src
